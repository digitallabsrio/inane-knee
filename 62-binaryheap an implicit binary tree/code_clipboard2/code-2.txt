class BinaryHeap(BaseSet):
    def __init__(self, iterable=[], a=None):
        if a: 
            self._make_heap(a)
        else:
            self._initialize()
            self.add_all(iterable)

    def add(self, x):
        if len(self.a) < self.n+1:
            self.resize()
        self.a[self.n] = x
        self.n += 1
        self.bubble_up(self.n-1)
        return True

    def bubble_up(self, i):
        p = parent(i)
        while i > 0 and self.a[i] < self.a[p]:
            self.a[i], self.a[p] = self.a[p], self.a[i]
            i = p
            p = parent(i)