# Node class
class MergeSortDLLNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
# Merge sort class
class MergeSortDLL:
    # initialize function
    def __init__(self):
        self.head = None
    # Function to add value
    def add(self, data):
        new_node = MergeSortDLLNode(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = new_node
            new_node.prev = current
    # Merge sort function
    def merge_sort(self):
        self.head = self._merge_sort(self.head)
    # Helper function
    def _merge_sort(self, head):
        if head is None or head.next is None:
            return head
        middle = self._get_middle(head)
        next_of_middle = middle.next
        middle.next = None
        left = self._merge_sort(head)
        right = self._merge_sort(next_of_middle)
        return self._merge(left, right)
    # Helper function
    def _merge(self, left, right):
        if left is None:
            return right
        if right is None:
            return left
        if left.data <= right.data:
            result = left
            result.next = self._merge(left.next, right)
            result.next.prev = result
        else:
            result = right
            result.next = self._merge(left, right.next)
            result.next.prev = result
        return result
    # Function to get middle value
    def _get_middle(self, head):
        if head is None:
            return None
        slow = head
        fast = head.next
        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next
        return slow
    # Function to print list
    def print_list(self):
        current = self.head
        while current is not None:
            print(current.data, end=" ")
            current = current.next
        print()

if __name__ == "__main__":    
    merge_sort_dll = MergeSortDLL()
    merge_sort_dll.add(5)
    merge_sort_dll.add(2)
    merge_sort_dll.add(9)
    merge_sort_dll.add(1)
    merge_sort_dll.add(3)
    merge_sort_dll.add(6)

    print("Original List:", end=" ")
    merge_sort_dll.print_list()

    merge_sort_dll.merge_sort()

    print("Sorted List:", end=" ")
    merge_sort_dll.print_list()