class BTree(BaseSet):
    class Node(object):
        def __init__(self, btree):
            self.btree = btree
            self.keys = new_array(self.btree.b)
            self.children = new_int_array(self.btree.b+1, -1)
            self.id = self.btree.bs.place_block(self)
    
    def __init__(self, b):
        self._initialize(b)
    
    def add_recursive(self, x, ui):
        u = self.bs.read_block(ui)
        i = find_it(u.keys, x)
        if i < 0: raise DuplicateValueError()
        if u.children[i] < 0:
            u.add(x, -1)
            self.bs.write_block(u.id, u)
        else:
            w = self.add_recursive(x, u.children[i])
            if w is not None:
                x = w.remove(0)
                self.bs.write_block(w.id, w)
                u.add(x, w.id)
                self.bs.write_block(u.id, u)
        if u.is_full(): return u.split()
        return None