class BTree(BaseSet):
    class Node(object):
        def __init__(self, btree):
            self.btree = btree
            self.keys = new_array(self.btree.b)
            self.children = new_int_array(self.btree.b+1, -1)
            self.id = self.btree.bs.place_block(self)
    
    def __init__(self, b):
        self._initialize(b)
    
    def find(self, x):
        z = None
        ui = self.ri
        while ui >= 0:
            u = self.bs.read_block(ui)
            i = find_it(u.keys, x)
            if i < 0:
                return u.keys[-(i+1)] # found it
            if u.keys[i] is not None:
                z = u.keys[i]
            ui = u.children[i]
        return z