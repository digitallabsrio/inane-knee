from utils import new_array
from base import BaseList
from arraydeque import ArrayDeque

class SEList(BaseList):
    class BDeque(ArrayDeque):
        """A bounded-size deque"""
        def __init__(self, b):
            super(SEList.BDeque, self).__init__()
            self.a = new_array(b+1)
        
        def _resize(self):
            pass
    # Node class    
    class Node(object):
        def __init__(self, b):
            self.d = SEList.BDeque(b)
            self.prev = None
            self.next = None
            
    def __init__(self, b):
        super(SEList, self).__init__()
        self.b = b
        self._initialize()
    # Function to create new node    
    def _new_node(self):
        return SEList.Node(self.b)
    # Initialize function
    def _initialize(self):
        self.dummy = self._new_node()
        self.dummy.next = self.dummy.prev = self.dummy
        self.n = 0
    # Function to add a node before a node    
    def _add_before(self, w):
        u = self._new_node()
        u.prev = w.prev
        u.next = w
        u.next.prev = u
        u.prev.next = u
        return u
    # Helper function to remove
    def _remove_node(self, w):
        w.prev.next = w.next
        w.next.prev = w.prev
    # Function to get the location of a node    
    def _get_location(self, i):
        if i < self.n//2:
            u = self.dummy.next
            while i >= u.d.size():
                i -= u.d.size()
                u = u.next
            return u,i
        else:
            u = self.dummy
            idx = self.n
            while i < idx:
                u = u.prev
                idx -= u.d.size()
        return u, i-idx
    # Function to get value using _get_location()
    def get(self, i):
        u, j = self._get_location(i)
        return u.d.get(j)
    # Function to set value using _get_location()
    def set(self, i, x):
        u, j = self._get_location(i)
        return u.d.set(j, x)
    # Functi
    def _spread(self, u):
        w = u
        for j in range(self.b):
            w = w.next
        w = self._add_before(w)
        while w is not u:
            while w.d.size() < self.b:
                w.d.add_first(w.prev.d.remove_last())
            w = w.prev
            
    def _gather(self, u):
        w = u
        for j in range(self.b-1):
            while w.d.size() < self.b:
                w.d.add_last(w.next.d.remove_first())
            w = w.next
        self._remove_node(w)
    # Function to add values       
    def add(self, i, x):
        if i < 0 or i > self.n: raise IndexError()
        if i == self.n:
            self.append(x)
            return
        u, j = self._get_location(i)
        r = 0
        w = u
        while r < self.b and w is not self.dummy and w.d.size() == self.b+1:
            w = w.next
            r += 1
        if r == self.b:  # b blocks, each with b+1 elements
            self._spread(u)
            w = u
        if w == self.dummy: # ran off the end - add new node
            w = self._add_before(w)
        while w is not u: # work backwards, shifting elements as we go
             w.d.add_first(w.prev.d.remove_last())
             w = w.prev
        w.d.add(j, x)
        self.n += 1
    # Function to append values
    def append(self, x):
        last = self.dummy.prev
        if last is self.dummy or last.d.size() == self.b+1:
            last = self._add_before(self.dummy)
        last.d.append(x)
        self.n += 1
    # Function to remove values
    def remove(self, i):
        if i < 0 or i > self.n-1: raise IndexError()
        u, j = self._get_location(i)
        y = u.d.get(j)
        w = u
        r = 0
        while r < self.b and w is not self.dummy and w.d.size() == self.b-1:
            w = w.next
            r += 1
        if r == self.b: # b blocks, each with b-1 elements
            self._gather(u)
        u.d.remove(j)
        while u.d.size() < self.b-1 and u.next is not self.dummy:
            u.d.add_last(u.next.d.remove_first())
            u = u.next
        if u.d.size() == 0: self._remove_node(u)
        self.n -= 1
    # Function to clear the list
    def clear(self):
        self._initialize()
    # Iterator function    
    def __iter__(self):
        u = self.dummy.next
        while u is not self.dummy:
            for x in u.d:
                yield x
            u = u.next

if __name__ == "__main__":
    # Initiazlizing variables
    n = 51
    b = 4
    # Creating object
    l = SEList(b)
    # Adding values
    for i in range(n):
        l.append(i * 10)
    print("Adding elements: ", list(l))
    # Removing values
    for i in range(n):
        l.remove(l.size() - 1)
        print("Removing elements: ", list(l))
    print("After removing elements: ", list(l))