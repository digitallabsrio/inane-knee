class ScapegoatTree(BinarySearchTree):
    def __init__(self):
        super(ScapegoatTree, self).__init__()
        self._initialize()
        
    def _initialize(self):
        self.n = 0
        self.q = 0
        
    def add(self, x):
        (u, d) = self.add_with_depth(x)
        if d > log32(self.q):
            # depth exceeded, find scapegoat
            w = u.parent
            while 3*self._size(w) <= 2*self._size(w.parent):
                w = w.parent
            self.rebuild(w.parent)
        return d >= 0