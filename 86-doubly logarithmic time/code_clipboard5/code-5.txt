import random
from base import BaseSet
from treap import Treap
from xfasttrie import XFastTrie
from utils import w
# STreap class
class STreap(Treap):
    # Function split
    def split(self, x):
        u = self._find_last(x)
        s = self._new_node(None)
        if u.right is self.nil:
            u.right = s
        else:
            u = u.right
            while u.left is not self.nil:
                u = u.left
            u.left = s
        s.parent = u
        s.p = -1
        self.bubble_up(s)
        self.r = s.right
        if self.r is not self.nil: self.r.parent = self.nil
        ret = STreap()
        ret.r = s.left
        if ret.r is not ret.nil: ret.r.parent = ret.nil
        return ret
    # Function to absord
    def absorb(self, t):
        s = self._new_node(None)
        s.right = self.r
        if self.r is not self.nil: self.r.parent = s
        s.left = t.r
        if t.r is not t.nil: t.r.parent = s
        self.r = s
        t.r = t.nil
        self.trickle_down(s)
        self.splice(s)
    # Size function
    def size(self):
        raise AttributeError(self.__class__.__name__ \
                             + "does not correctly maintain size()")
# Pair class
class Pair(tuple):
    def __new__(cls, x, y=None):
        return super(Pair, cls).__new__(cls, (x, y))
    
    @property
    def t(self):
        return self[1]
    
    @property
    def x(self):
        return self[0]
    
    def __int__(self):
        return int(self[0])
# Main class
class YFastTrie(BaseSet):
    def __init__(self):
        super(YFastTrie, self).__init__()
        self._initialize()
    # Initialize function  
    def _initialize(self):
        self.xft = XFastTrie()
        self.xft.add(Pair((1<<w)-1, STreap()))
        self.n = 0
    # Function to add values
    def add(self, x):
        ix = int(x)
        t = self.xft.find(Pair(ix))[1]
        if t.add(x):
            self.n += 1
            if random.randrange(w) == 0:
                t1 = t.split(x)
                self.xft.add(Pair(ix, t1))
            return True
        return False
    # Function to find values
    def find(self, x):
        return self.xft.find(Pair(int(x)))[1].find(x)
    # Function to remove values
    def remove(self, x):
        ix = int(x)
        u = self.xft.find_node(ix)
        ret = u.x[1].remove(x)
        if ret: self.n -= 1
        if u.x[0] == ix and ix != (1<<w) - 1:
            t2 = u.next.x[1]
            t2.absorb(u.x[1])
            self.xft.remove(u.x)
        return ret
    # Iterator funciton
    def __iter__(self):
        # self.xft is a bunch of pairs
        for p in self.xft:
            # the one'th element of each pair is an STreap
            for x in p[1]:
                yield x
    # Function to reset the values
    def clear(self):
        self._initialize()

if __name__ == "__main__":
    # Creating varibales and object
    n = 50
    t = YFastTrie()
    # Random generator
    rand = random.Random(0)
    print("Adding: ", end="")
    for i in range(n):
        x = rand.randint(0, 100 * n - 1)
        print(f"{x}," if i < n - 1 else f"{x}")
        t.add(x)

    print()
    for p in t.xft:
        print(f"{p.x},", end="")
    print()
    for p in t.xft:
        print(f"{p.t},", end="")

    print(t)
    print("Searching: ", end="")
    for i in range(n):
        x = rand.randint(0, 100 * n - 1)
        print(f"{x}=>{t.find(x)}," if i < n - 1 else f"{x}=>{t.find(x)}")
    print()
    print(t)
    print("Removing: ", end="")
    for i in range(n // 2):
        x = t.find(rand.randint(0, 100 * n - 1))
        if x is not None:
            print(f"{x}," if i < n // 2 - 1 else f"{x}")
            t.remove(x)
    print()
    print(f"Size = {t.size()}")
    print(t)
    print("Searching: ", end="")
    for i in range(n):
        x = rand.randint(0, 100 * n - 1)
        print(f"{x}=>{t.find(x)}," if i < n - 1 else f"{x}=>{t.find(x)}")