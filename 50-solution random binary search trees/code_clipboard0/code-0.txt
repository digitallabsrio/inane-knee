import random
from binarysearchtree import BinarySearchTree
# Main class
class Treap(BinarySearchTree):
    class Node(BinarySearchTree.Node):
        def __init__(self, x):
            super(Treap.Node, self).__init__(x)
            self.p = random.random()
            
        def __str__(self):
            return "[%r,%f]" % (self.x, self.p)
    # Initialize function    
    def __init__(self, iterable=[]):
        super(Treap, self).__init__(iterable)
    # Function to create new node
    def _new_node(self, x):
        return Treap.Node(x)
    # Function to add all values 
    def addall(self, a):
        u = self._new_node(None)
        low = 0
        high = len(a) - 1
        mid = (low + high) // 2
        u.x = a[mid]
        self.add_node(u)
        self.addallrecursive(a, low, mid - 1, u)
        self.addallrecursive(a, mid + 1, high, u)
        return True
    # Function to add all values recursively
    def addallrecursive(self, a, low, high, p):
        if low > high:
            return

        mid = (low + high) // 2

        node = self._new_node(a[mid])
        self.add_node(node)
        self.addallrecursive(a, low, mid - 1, node)
        self.addallrecursive(a, mid + 1, high, node)
    # Function to bubble up treap        
    def bubble_up(self, u):
        while u != self.r and u.parent.p > u.p:
            if u.parent.right == u:
                self.rotate_left(u.parent)
            else:
                self.rotate_right(u.parent)

        if u.parent == self.nil:
            self.r = u
    # Function to remove values   
    def remove(self, x):
        u = self._find_last(x)
        if u is not None and u.x == x:
            self.trickle_down(u)
            self.splice(u)
            return True
        return False
    # Function to trickle down  
    def trickle_down(self, u):
        while u.left is not None or u.right is not None:
            if u.left is None:
                self.rotate_left(u)
            elif u.right is None:
                self.rotate_right(u)
            elif u.left.p < u.right.p:
                self.rotate_right(u)
            else:
                self.rotate_left(u)
            if self.r == u:
                self.r = u.parent

if __name__ == "__main__":
    # Creating object
    treap = Treap()
    # Adding values
    treap.addall([1,2,3,4,5,6])

    print("Tree contents:")
    for i in treap:
        print(i, end=" ")
    print()
    # Removing value
    treap.remove(4)

    print("Tree contents after removing 4:")
    for i in treap:
        print(i, end=" ")
    print()        