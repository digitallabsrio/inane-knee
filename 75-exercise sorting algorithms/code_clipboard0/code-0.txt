# Node class
class MergeSortDLLNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
# Merge sort class
class MergeSortDLL:
    # initialize function
    def __init__(self):
        self.head = None
    # Function to add value
    def add(self, data):
        # Write your code here
        pass
    # Merge sort function
    def merge_sort(self):
        # Write your code here
        pass
    # Helper function
    def _merge_sort(self, head):
        # Write your code here
        pass
    # Helper function
    def _merge(self, left, right):
        # Write your code here
        pass
    # Function to get middle value
    def _get_middle(self, head):
        if head is None:
            return None
        slow = head
        fast = head.next
        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next
        return slow
    # Function to print list
    def print_list(self):
        current = self.head
        while current is not None:
            print(current.data, end=" ")
            current = current.next
        print()

if __name__ == "__main__":
    merge_sort_dll = MergeSortDLL()
    merge_sort_dll.add(5)
    merge_sort_dll.add(2)
    merge_sort_dll.add(9)
    merge_sort_dll.add(1)
    merge_sort_dll.add(3)
    merge_sort_dll.add(6)

    print("Original List:", end=" ")
    merge_sort_dll.print_list()

    merge_sort_dll.merge_sort()

    print("Sorted List:", end=" ")
    merge_sort_dll.print_list()