class RedBlackTree(BinarySearchTree):
    class Node(BinarySearchTree.Node):
        def __init__(self, x):
            super(RedBlackTree.Node, self).__init__(x)
            self.colour = black
  
    def __init__(self, iterable=[]):
        self.nil = RedBlackTree.Node(None)
        self.nil.right = self.nil.left = self.nil.parent = self.nil
        super(RedBlackTree, self).__init__([], self.nil)
        self.r = self.nil
        self.add_all(iterable)
    
    def add_fixup(self, u):
        while u.colour == red:
            if u == self.r:
                u.colour = black
            w = u.parent
            if w.left.colour == black:
                self.flip_left(w)
                u = w
                w = u.parent
            if w.colour == black:
                return   # red-red edge is eliminated - done
            g = w.parent
            if g.right.colour == black:
                self.flip_right(g)
                return
            self.push_black(g)
            u = g