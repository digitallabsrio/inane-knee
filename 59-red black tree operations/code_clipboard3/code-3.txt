class RedBlackTree(BinarySearchTree):
    class Node(BinarySearchTree.Node):
        def __init__(self, x):
            super(RedBlackTree.Node, self).__init__(x)
            self.colour = black
  
    def __init__(self, iterable=[]):
        self.nil = RedBlackTree.Node(None)
        self.nil.right = self.nil.left = self.nil.parent = self.nil
        super(RedBlackTree, self).__init__([], self.nil)
        self.r = self.nil
        self.add_all(iterable)
    
    def remove_fixup(self, u):
        while u.colour > black:
            if u == self.r:
                u.colour = black
            elif u.parent.left.colour == red:
                u = self.remove_fixup_case1(u)
            elif u == u.parent.left:
                u = self.remove_fixup_case2(u)
            else:
                u = self.remove_fixup_case3(u)
        if u != self.r:   # restore left-leaning property, if needed
            w = u.parent
            if w.right.colour == red and w.left.colour == black:
                self.flip_left(w)