from utils import new_array
from base import BaseSet
import random
# Number of bits
w = 32
# Main class
class LinearHashTable(BaseSet):
    
    def __init__(self, iterable=[]):
        self._initialize()
        self.initialize()
        self.add_all(iterable)
        
    def _initialize(self):
        self.dl = object()
    # Initialize function    
    def initialize(self):
        self.d = 1
        self.t = new_array((1<<self.d))
        self.q = 0
        self.n = 0
    # Function to resize the table
    def _resize(self):
        self.d = 1
        while ((1<<self.d) < 3*self.n): self.d += 1
        told = self.t
        self.t = new_array((1<<self.d))
        self.q = self.n
        for x in told:
            if x is not None and x != self.dl:
                i = self._hash(x)
                while self.t[i] is not None: 
                    i = (i+1) % len(self.t)
                self.t[i] = x
    # Helper function for hash codes
    def hash_code(self, x):
        return hash(x)
    # Function to get hash values
    def _hash(self, x):
        h = self.hash_code(x)
        return  (self.tab[0][h&0xff] \
                 ^ self.tab[1][(h>>8)&0xff] \
                 ^ self.tab[2][(h>>16)&0xff] \
                 ^ self.tab[3][(h>>24)&0xff]) >> (w-self.d)
    # Function to add values              
    def add(self, x):
        if self.find(x) is not None: return False
        if 2*(self.q+1) > len(self.t): self._resize()
        i = self._hash(x)
        while self.t[i] is not None and self.t[i] != self.dl:
            i = (i + 1) % len(self.t)
        if self.t[i] is None: self.q += 1
        self.n += 1
        self.t[i] = x
        return True
    # New add method
    def addSlow(self,x):
        if self.find(x) is not None:
            return False
        if 2 * (self.q + 1) > len(self.t):
            self._resize()
        i = self._hash(x)
        while self.t[i] is not None:
            if self.t[i] != self.dl and x == self.t[i]:
                return False
            i = (i + 1) % len(self.t)
        if self.t[i] is None:
            self.q += 1
        self.n += 1
        self.t[i] = x
        return True
    # Function to find values  
    def find(self, x):
        i = self._hash(x)
        while self.t[i] is not None:
            if self.t[i] != self.dl and x == self.t[i]: 
                return self.t[i]
            i = (i + 1) % len(self.t)
    # Function to remove values     
    def remove(self, x):
        i = self._hash(x)
        while self.t[i] is not None:
            y = self.t[i]
            if y != self.dl and x == y:
                self.t[i] = self.dl
                self.n -= 1
                if 8*self.n < len(self.t): self._resize()
                return y
            i = (i + 1) % len(self.t)
        return None
    # Function to reset the table
    def clear(self):
        self.initialize()
    # Iterator function 
    def __iter__(self):
        for x in self.t:
            if x is not None and x != self.dl:
                yield x
    # Hash table
    tab = \
      [[0x0069aeff,
        0x6ac0719e,
        0x384cd7ee,
        0xcba78313,
        0x133ef89a,
        0xb37979e6,
        0xa4c4e09c,
        0x911c738b,
        0xc7fe9194,
        0xba8e5dc7,
        0xe610718c,
        0x48460ac5,
        0x6b4d9d43,
        0x73afeeab,
        0x051264cb,
        0x4b3dba93,
        0x28837665,
        0xfb80a52b,
        0xad1c14af,
        0xb2baf17f,
        0x35e311a5,
        0xf7fa2905,
        0xa973c315,
        0x00885f47,
        0x8842622b,
        0x0445a92c,
        0x701ba3a0,
        0xef608902,
        0x176099ad,
        0xd240f938,
        0xb32d83c6,
        0xb341afb8,
        0xc3a978fb,
        0x55ed1f0c,
        0xb581286e,
        0x8ff6938e,
        0x9f11c1c5,
        0x4d083bd6,
        0x1aacc2a4,
        0xdf13f00a,
        0x1e282712,
        0x772d354b,
        0x21e3a7fd,
        0x4bc932dc,
        0xe1deb7ba,
        0x5e868b8a,
        0xc9331cc6,
        0xaa931bbf,
        0xff92aba6,
        0xe3efc69f,
        0xda3b8e2a,
        0xf9b21ec1,
        0x2fb89674,
        0x61c87462,
        0xa553c2f9,
        0xca01e279,
        0x35999337,
        0xf44c4fd3,
        0x136a2773,
        0x812607a8,
        0xbfcd9bbf,
        0x0b1d15cd,
        0xc2a0038b,
        0x029ab4f7,
        0xcd7c58f9,
        0xed3821c4,
        0x325457c6,
        0x1dc6b295,
        0x876dcb83,
        0x52df45fc,
        0xa01c9fba,
        0xc938ff66,
        0x19e52c87,
        0x03ae67f9,
        0x7db39e51,
        0x74f31686,
        0x5f10e5a3,
        0x74108d8a,
        0x64e63104,
        0xd86a38d6,
        0x65be2fbb,
        0xef06049e,
        0x9bca1dbd,
        0x06c63e73,
        0xe97bd103,
        0xfed3c22c,
        0x09d10fc6,
        0xb92633a3,
        0x21378ebf,
        0xe37fa54e,
        0x893c7910,
        0xc1c74a5a,
        0x6c23c029,
        0x4d4b6187,
        0xd72bb8fb,
        0x0dbe1118,
        0x5e0f4188,
        0xce0d2dc8,
        0x8dd83231,
        0x0466ab90,
        0x814bc11a,
        0xef688b9b,
        0x0a03c851,
        0xca3c984f,
        0x6df87ca4,
        0x6b34d1b2,
        0x2bad5c75,
        0xaed1b6d8,
        0x8c73f8b4,
        0x4577d798,
        0x5c953767,
        0xe7da2d51,
        0x2b9279a0,
        0x418d9b51,
        0x8c47ec3d,
        0x894e6119,
        0xa0ca769d,
        0x1c3b16a4,
        0xa1621b5b,
        0xa695da53,
        0x22462819,
        0xf4b878cf,
        0x72b4d648,
        0x1faf4267,
        0x4ba16750,
        0x08a9d645,
        0x6bfb829c,
        0xe051295f,
        0x6dd5cd97,
        0x2e9d1baf,
        0x6ed6231d,
        0x6f84cb25,
        0x9ae60c95,
        0xbcee55ca,
        0x6831cd97,
        0x2ccdbc99,
        0x9f8a0a81,
        0xa0b2c08f,
        0xe957c36b,
        0x9cb797b5,
        0x107c6362,
        0x48dacf5d,
        0x6e16f569,
        0x39be78c3,
        0x6445637f,
        0xed445ee5,
        0x8ec45004,
        0x9ef8a405,
        0xb5796a45,
        0x049d5143,
        0xb3c1d852,
        0xc36d9b44,
        0xab0da981,
        0xff5226b3,
        0x19169b4c,
        0x9a49194d,
        0xba218b42,
        0xab98c8ee,
        0x4db02645,
        0x6faca3c8,
        0x12c60d2d,
        0xaf67b750,
        0xf0f6a855,
        0xead566d9,
        0x42d0cccd,
        0x76a532bb,
        0x82a6dc35,
        0xc1c23d0e,
        0x83d45bd2,
        0xd7024912,
        0x97888901,
        0x2b7cdd2c,
        0x523742a5,
        0xecb96b3b,
        0xd800d833,
        0x7b4d0c91,
        0x95c7dd86,
        0x88880aad,
        0xf0ce0990,
        0x7e292a90,
        0x79ac4437,
        0x8a9f59cc,
        0x818444d1,
        0xae4e735d,
        0xa529db95,
        0x58b35661,
        0xa909a7de,
        0x9273beaa,
        0xfe94332c,
        0x259b88e4,
        0xc88f4f6a,
        0x2a9d33ef,
        0x4b5d106d,
        0xdc3a9fca,
        0xa8061cad,
        0x7679422c,
        0xaf72ad02,
        0xc5799ea5,
        0x306d694d,
        0x620aad10,
        0xd188b9dd,
        0xeff6ad87,
        0x6b890354,
        0xb5907cd3,
        0x733290fc,
        0x4b6c0733,
        0x0bad0ebd,
        0xa049d3ad,
        0xc9d0cdae,
        0x9c144d6f,
        0x5990b63b,
        0xfa33d8e2,
        0x9ebeb5a0,
        0xbc7c5c92,
        0xd3edd2e6,
        0x54ae1af6,
        0xd6ada4bd,
        0x14094c5a,
        0x0e3c5adf,
        0xf1ab60f1,
        0x74456a66,
        0x0f3a675a,
        0x87445d0d,
        0xa81adc2e,
        0x0f47a1a5,
        0x4eedb844,
        0x9c9cb0ce,
        0x8bb3d330,
        0x02df93e6,
        0x86e3ad51,
        0x1c1072b9,
        0xacf3001b,
        0xbd08c487,
        0xc2667a11,
        0xdd5ef664,
        0xd47b67fb,
        0x959cca45,
        0xa7da8e68,
        0xb75b1e18,
        0x75201924,
        0xe689ab8b,
        0x0f5e6b0a,
        0x75205923,
        0xbba35593,
        0xd24dab24,
        0x0288caeb,
        0xcbf022a9,
        0x392d7ee5,
        0x16fe493a,
        0xb6bcadfd,
        0x9813ec72,
        0x9aa3d37c,
        0xee88a59e,
        0x6cdbad4e,
        0x6b96aabf,
        0xcb54d5e5],
        [0x116fc403,
        0x260d7e7b,
        0xdef689e7,
        0xa5b3d49a,
        0x921f3594,
        0xb24c8cba,
        0x1bdefb3f,
        0x6519e846,
        0x24b37253,
        0x1cc6b12b,
        0x6f48f06e,
        0xca90b0db,
        0x8e20570b,
        0xda75ed0f,
        0x1b515143,
        0x0990a659,
        0xdcedb6b3,
        0xec22de79,
        0xdd56f7a9,
        0x901194a6,
        0x4bf3db02,
        0x5d31787d,
        0xd24da2ca,
        0x9fc9bc14,
        0x9aa38ac9,
        0xe95972ba,
        0x8233a732,
        0xb9d4317e,
        0x51f9b329,
        0x94f12c56,
        0x1ace26e4,
        0xecda5183,
        0x1353e547,
        0x39b99ab3,
        0x6413ac97,
        0xeb6b5334,
        0xdd94ed2b,
        0x298e9d2c,
        0xd38abc91,
        0x3f17ee4e,
        0x99f8931d,
        0x88bae7da,
        0xb5506a36,
        0x2d7baf6d,
        0x42a98d2b,
        0xbb9b94b9,
        0x58820083,
        0x521bba4c,
        0x76699597,
        0x137b86be,
        0x8533888e,
        0xb37316dd,
        0x284c3de4,
        0xfe60e3e6,
        0x94edaa40,
        0x919c85cd,
        0x24cb6f23,
        0x6b446fbd,
        0xbe933c15,
        0x2a43951a,
        0x791a9f90,
        0x47977c04,
        0xa6350eec,
        0x95e817a5,
        0xffc82e8c,
        0xad379229,
        0x6ec9531a,
        0x8cab29f9,
        0xb2f18402,
        0xd0ebdac1,
        0xd7b559b4,
        0x7ad30e7c,
        0xe1d1adb7,
        0x58a66f9c,
        0x7a26636a,
        0x8c865f92,
        0x65363517,
        0x732b87db,
        0x64a1ad52,
        0x72e87c39,
        0x0b943e4d,
        0x532d3593,
        0xedcf9975,
        0x44b5bec1,
        0x13ac91f8,
        0x6e6f3a76,
        0x36ac3c6d,
        0x528a3ecf,
        0xf3d8cd75,
        0x8facd64c,
        0xdb4d13d